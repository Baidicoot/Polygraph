# -*- coding: utf-8 -*-
"""llama2-finetune-08-29

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IM1mG5KcIbFIXs_bdinbFB8t6zk_NHyR

## Init

Based on https://colab.research.google.com/drive/134o_cXcMe_lsvl15ZE_4Y75Kstepsntu?usp=sharing
"""

# import locale
# locale.getpreferredencoding = lambda: "UTF-8"

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# # Note: Run these installation lines manually or include them in a requirements.txt file
# !pip install -q accelerate==0.21.0 peft==0.4.0 bitsandbytes==0.40.2 transformers==4.31.0 trl==0.4.7 pandas xformers;
# !apt-get -qq install poppler-utils tesseract-ocr;
# !pip install -q unstructured["local-inference"]==0.7.4 pillow;

import os
import json
import pandas as pd
import subprocess
# import torch
from pathlib import Path
from datasets import load_dataset, Dataset
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    HfArgumentParser,
    AutoTokenizer,
    TrainingArguments,
    pipeline,
    logging,
)
from peft import LoraConfig, PeftModel, get_peft_model
from trl import SFTTrainer

# !export 'PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:256'

"""## Get data"""

# Clone the Git repository if the directory doesn't exist
if not os.path.isdir("Polygraph"):
    subprocess.run(["git", "clone", "https://github.com/CarperAI/Polygraph.git", "-b", "rearchitecture"])

# Define the path to the 'dialogues_json' directory
dialogues_json_path = Path("Polygraph/Polygraph/agents/data/dialogues_json")

# Initialize an empty list to store file names
file_list = []

# Check if the directory exists
if dialogues_json_path.exists() and dialogues_json_path.is_dir():
    # Iterate over each file in the directory
    for file_path in dialogues_json_path.iterdir():
        # Check if it is a file (and not a subdirectory)
        if file_path.is_file():
            # Append the file name to the list
            file_list.append(str(file_path))

print(file_list, len(file_list))

"""## Process data"""

import json
import pandas as pd
from pathlib import Path
from datasets import Dataset

def flatten_dialogue(json_obj, flattened=[]):
    if isinstance(json_obj, dict):
        if "dialogue" in json_obj:
            flattened.append({"dialogue": json_obj["dialogue"]})
        if "children" in json_obj:
            for child in json_obj["children"]:
                flatten_dialogue(child, flattened)
    elif isinstance(json_obj, list):
        for item in json_obj:
            flatten_dialogue(item, flattened)
    return flattened

# Create output directory if it doesn't exist
output_folder_path = Path("Polygraph/Polygraph/agents/data/dialogues_json_processed")
output_folder_path.mkdir(parents=True, exist_ok=True)

# Initialize DataFrame for storing all data
all_data_df = pd.DataFrame()

# Process each file in the directory
for input_file_path in dialogues_json_path.iterdir():
    if input_file_path.is_file() and input_file_path.suffix == '.json':

        # Initialize empty lists to store CSV data
        instruction_list = []
        input_list = []
        response_list = []

        with open(input_file_path, "r") as file:
            data = json.load(file)

        # Recursively flatten the JSON structure
        flattened_data = flatten_dialogue(data)

        # Iterate through each dialogue in the flattened JSON data
        for dialogue_entry in flattened_data:
            dialogue = dialogue_entry["dialogue"]
            # Extract system instruction
            instruction = next(
                (item["content"] for item in dialogue if item["role"] == "system"), None
            )
            # Extract first user input
            user_input = next((item["content"] for item in dialogue if item["role"] == "user"), None)

            # Initialize an empty string to store the response dialogue
            response_str = ""
            for item in dialogue[2:]:
                role_tag = "<user>" if item["role"] == "user" else "<assistant>"
                response_str += f"### {role_tag} {item['content']}\n"

            # Append to lists
            instruction_list.append(instruction)
            input_list.append(user_input)
            response_list.append(response_str.strip())

        # Create a DataFrame
        df = pd.DataFrame({
            "instruction": instruction_list,
            "input": input_list,
            "response": response_list
        })

        # Add the 'text' column by concatenating the other columns
        df['text'] = "### Instructions:\n" + df['instruction'] + "\n### Input:\n" + df['input'] + "\n### Response:\n" + df['response']

        # Concatenate this DataFrame to the all_data_df DataFrame
        all_data_df = pd.concat([all_data_df, df], ignore_index=True)

# Save the concatenated DataFrame to a single CSV file
all_data_df.to_csv(output_folder_path / "all_data.csv", index=False)
print(f"All processed data saved at: {output_folder_path / 'all_data.csv'}")

# Convert the DataFrame to a Hugging Face Dataset
dataset = Dataset.from_pandas(all_data_df)

dataset[4]['text']

dataset_shuffled = dataset.shuffle(seed=42)

"""## Model setup"""

local_rank = -1
per_device_train_batch_size = 2
per_device_eval_batch_size = 2
gradient_accumulation_steps = 2
learning_rate = 2e-4
max_grad_norm = 0.3
weight_decay = 0.001
lora_alpha = 16
lora_dropout = 0.1
lora_r = 64
max_seq_length = 256  # Or another value based on your dataset
model_name = "meta-llama/Llama-2-7b-chat-hf"
new_model = "Llama-2-7b-chat-hf-finetuned"
use_4bit = True
use_nested_quant = False
bnb_4bit_compute_dtype = "float16"
bnb_4bit_quant_type = "nf4"
num_train_epochs = 2
fp16 = True  # Enabled mixed-precision
bf16 = False
packing = False
gradient_checkpointing = True
optim = "paged_adamw_32bit"
lr_scheduler_type = "cosine"
max_steps = -1
warmup_ratio = 0.03
group_by_length = True
save_steps = 10
logging_steps = 1
device_map = {"": 0}
output_dir = "./results"
report_to = "tensorboard"
tb_log_dir = "./results/logs"

def load_model(model_name):
    model = AutoModelForCausalLM.from_pretrained(model_name)
    tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
    tokenizer.pad_token = tokenizer.eos_token
    tokenizer.padding_side = "right"

    peft_config = LoraConfig(
        lora_alpha=16,
        lora_dropout=0.1,
        r=64,
        bias="none",
        task_type="CAUSAL_LM"
    )

    # Freeze the last 5 layers
    for param in list(model.parameters())[-5:]:
        param.requires_grad = False

    # Move the model to GPU
    model = model.to("cuda")

    return model, tokenizer, peft_config

# from huggingface_hub import notebook_login
# notebook_login()

model, tokenizer, peft_config = load_model(model_name)

prompt = "Hi, I'm looking to buy some apples. Can you help me with that?"

pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=200, device=0)
result = pipe(f"<s>[INST] {prompt} [/INST]")
print(result[0]['generated_text'])

prompt = "please sell me some apples. I need the freshest apples in town."

pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=200, device=0)
result = pipe(f"<s>[INST] {prompt} [/INST]")
print(result[0]['generated_text'])

# print(model)

"""## Fine-tuning"""

# Freeze the last 5 layers
for layer in model.model.layers[-5:]:
    for param in layer.parameters():
        param.requires_grad = False


training_arguments = TrainingArguments(
    output_dir=output_dir,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    learning_rate=learning_rate,
    fp16=fp16,
    bf16=bf16,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    group_by_length=group_by_length,
    lr_scheduler_type=lr_scheduler_type,
    report_to="tensorboard"
)

trainer = SFTTrainer(
    model=model,
    train_dataset=dataset,
    peft_config=peft_config,
    dataset_text_field="text",
    max_seq_length=max_seq_length,
    tokenizer=tokenizer,
    args=training_arguments,
    packing=packing,
)

trainer.train()
trainer.model.save_pretrained(output_dir)

# %load_ext tensorboard
# %tensorboard --logdir results/logs

"""## Test model"""

prompt = "please sell me some apples. I need the freshest apples in town."

pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=200, device=0)
result = pipe(f"<s>[INST] {prompt} [/INST]")
print(result[0]['generated_text'])

prompt = "Hi, I'm looking to buy some apples. Can you help me with that?"

pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=200, device=0)
result = pipe(f"<s>[INST] {prompt} [/INST]")
print(result[0]['generated_text'])

"""## To-do: better eval code

> Indented block


"""